/**
 * Variant Management System Types
 * Defines TypeScript interfaces for schema variant generation system
 */

import { DMMF } from '@prisma/generator-helper';

/**
 * Supported schema variant types
 */
export enum VariantType {
  PURE = 'pure', // Raw model schema
  INPUT = 'input', // API input validation
  RESULT = 'result', // API response validation
}

/**
 * File naming configuration for variants
 */
export interface NamingConfig {
  suffix: string;
  schemaNameSuffix: string;
  typeNameSuffix: string;
}

/**
 * Field exclusion rules for variants
 */
export interface FieldExclusionRule {
  // Fields to exclude by name
  excludeFields?: string[];
  // Fields to exclude by type
  excludeFieldTypes?: string[];
  // Exclude all relation fields
  excludeRelations?: boolean;
  // Exclude auto-generated fields (id, createdAt, updatedAt)
  excludeAutoGenerated?: boolean;
  // Exclude fields with specific attributes
  excludeWithAttributes?: string[];
}

/**
 * Validation customization for variants
 */
export interface ValidationCustomization {
  // Override default validations for specific fields
  fieldValidations?: Record<string, string>;
  // Apply additional validations
  additionalValidations?: Record<string, string[]>;
  // Disable all inline @zod validations
  disableInlineValidations?: boolean;
  // Custom validation templates
  validationTemplates?: Record<string, string>;
}

/**
 * Schema generation options for variants
 */
export interface SchemaGenerationOptions {
  // Generate JSDoc documentation
  includeDocumentation?: boolean;
  // Include field examples in JSDoc
  includeExamples?: boolean;
  // Generate TypeScript type definitions
  generateTypes?: boolean;
  // Include schema statistics comments
  includeStatistics?: boolean;
  // Custom import statements
  customImports?: string[];
}

/**
 * Configuration for a single variant
 */
export interface VariantConfig {
  type: VariantType;
  enabled: boolean;
  naming: NamingConfig;
  fieldExclusions: FieldExclusionRule;
  validationCustomizations: ValidationCustomization;
  schemaOptions: SchemaGenerationOptions;
  // Priority for dependency resolution
  priority: number;
}

/**
 * Global variant management configuration
 */
export interface VariantManagerConfig {
  // Output directory for variant files
  outputDirectory: string;
  // Enable variant generation
  enableVariants: boolean;
  // Default configurations for each variant type
  variantDefaults: Record<VariantType, Partial<VariantConfig>>;
  // Model-specific variant overrides
  modelOverrides: Record<string, Partial<Record<VariantType, Partial<VariantConfig>>>>;
  // Global naming conventions
  globalNaming: {
    useModelPrefix: boolean;
    usePascalCase: boolean;
    customSeparator?: string;
  };
}

/**
 * Variant generation result
 */
export interface VariantGenerationResult {
  variantType: VariantType;
  fileName: string;
  filePath: string;
  schemaName: string;
  typeName: string;
  content: string;
  dependencies: string[];
  exports: Set<string>;
  imports: Set<string>;
  fieldCount: number;
  excludedFieldCount: number;
  validationCount: number;
  errors: string[];
}

/**
 * Collection of all variant results for a model
 */
export interface ModelVariantCollection {
  modelName: string;
  variants: Record<VariantType, VariantGenerationResult | null>;
  dependencies: Set<string>;
  crossVariantReferences: Record<VariantType, VariantType[]>;
  indexFile: {
    fileName: string;
    content: string;
    exports: Set<string>;
  };
  generationSummary: {
    totalVariants: number;
    successfulVariants: number;
    failedVariants: number;
    totalErrors: number;
    processingTime: number;
  };
}

/**
 * Variant manager interface
 */
export interface VariantManager {
  // Generate all variants for a model
  generateModelVariants(
    model: DMMF.Model,
    config?: Partial<VariantManagerConfig>,
  ): Promise<ModelVariantCollection>;

  // Generate specific variant for a model
  generateVariant(
    model: DMMF.Model,
    variantType: VariantType,
    config?: Partial<VariantConfig>,
  ): Promise<VariantGenerationResult>;

  // Validate variant configuration
  validateConfig(config: VariantManagerConfig): {
    isValid: boolean;
    errors: string[];
    warnings: string[];
  };

  // Get default configuration for variant type
  getDefaultConfig(variantType: VariantType): VariantConfig;

  // Resolve variant dependencies
  resolveDependencies(collections: ModelVariantCollection[]): {
    dependencyOrder: string[];
    circularDependencies: string[][];
    unresolvedDependencies: string[];
  };
}

/**
 * Default naming configurations for each variant type
 */
export const DEFAULT_NAMING_CONFIGS: Record<VariantType, NamingConfig> = {
  [VariantType.PURE]: {
    suffix: '.model.ts',
    schemaNameSuffix: 'Model',
    typeNameSuffix: 'ModelType',
  },
  [VariantType.INPUT]: {
    suffix: '.input.ts',
    schemaNameSuffix: 'Input',
    typeNameSuffix: 'InputType',
  },
  [VariantType.RESULT]: {
    suffix: '.result.ts',
    schemaNameSuffix: 'Result',
    typeNameSuffix: 'ResultType',
  },
};

/**
 * Default field exclusion rules for each variant type
 */
export const DEFAULT_FIELD_EXCLUSIONS: Record<VariantType, FieldExclusionRule> = {
  [VariantType.PURE]: {
    excludeFields: [],
    excludeRelations: false,
    excludeAutoGenerated: false,
  },
  [VariantType.INPUT]: {
    excludeFields: ['id', 'createdAt', 'updatedAt'],
    excludeRelations: true,
    excludeAutoGenerated: true,
  },
  [VariantType.RESULT]: {
    excludeFields: [],
    excludeRelations: false,
    excludeAutoGenerated: false,
  },
};

/**
 * Default validation customizations for each variant type
 */
export const DEFAULT_VALIDATION_CUSTOMIZATIONS: Record<VariantType, ValidationCustomization> = {
  [VariantType.PURE]: {
    disableInlineValidations: false,
  },
  [VariantType.INPUT]: {
    disableInlineValidations: false,
    additionalValidations: {
      // Add stricter validations for input
      email: ['email()'],
      password: ['min(8)', 'regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/)'],
    },
  },
  [VariantType.RESULT]: {
    disableInlineValidations: true, // Results don't need validation
  },
};

/**
 * Default schema generation options for each variant type
 */
export const DEFAULT_SCHEMA_OPTIONS: Record<VariantType, SchemaGenerationOptions> = {
  [VariantType.PURE]: {
    includeDocumentation: true,
    includeExamples: true,
    generateTypes: true,
    includeStatistics: true,
  },
  [VariantType.INPUT]: {
    includeDocumentation: true,
    includeExamples: false,
    generateTypes: true,
    includeStatistics: false,
  },
  [VariantType.RESULT]: {
    includeDocumentation: false,
    includeExamples: false,
    generateTypes: true,
    includeStatistics: false,
  },
};
